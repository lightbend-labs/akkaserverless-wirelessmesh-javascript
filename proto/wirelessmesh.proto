/*
 * Copyright 2021 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "akkaserverless/annotations.proto";

/**
* This is where we define our service and how the outside world will interact with our user function.
**/
package wirelessmesh;

/**
* The following section contains the message definitions needed for the service below.
**/

message AddCustomerLocationCommand {
    string customer_location_id = 1 [(akkaserverless.field).entity_key = true];
    string access_token = 2;
    string email = 3;
}

message RemoveCustomerLocationCommand {
    string customer_location_id = 1 [(akkaserverless.field).entity_key = true];
}

message ActivateDeviceCommand {
    string customer_location_id = 1 [(akkaserverless.field).entity_key = true];
    string device_id = 2;
}

message AssignRoomCommand {
    string customer_location_id = 1 [(akkaserverless.field).entity_key = true];
    string device_id = 2;
    string room = 3;
}

message RemoveDeviceCommand {
    string customer_location_id = 1 [(akkaserverless.field).entity_key = true];
    string device_id = 2;
}

message ToggleNightlightCommand {
    string customer_location_id = 1 [(akkaserverless.field).entity_key = true];
    string device_id = 2;
}

message GetCustomerLocationCommand {
    string customer_location_id = 1 [(akkaserverless.field).entity_key = true];
}

message Device {
    string device_id = 1;
    bool activated = 2;
    string customer_location_id = 3;
    string room = 4;
    bool nightlight_on = 5;
}

message CustomerLocation {
    string customer_location_id = 1;
    string access_token = 2;
    string email = 3;
    bool added = 4;
    bool removed = 5;
    repeated Device devices = 6;
}

/**
* The service definition. Note: GRPC is the default mechanism, but the google.api.http option gives us http capability
* for free.
**/
service WirelessMeshService {
    rpc AddCustomerLocation(AddCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/add-customer-location"
            body: "*"
        };
    }
    rpc RemoveCustomerLocation(RemoveCustomerLocationCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-customer-location"
            body: "*"
        };
    }

    rpc ActivateDevice(ActivateDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/activate-device"
            body: "*"
        };
    }

    rpc RemoveDevice(RemoveDeviceCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/remove-device"
            body: "*"
        };
    }

    rpc AssignRoom(AssignRoomCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/assign-room"
            body: "*"
        };
    }

    rpc GetCustomerLocation(GetCustomerLocationCommand) returns (CustomerLocation) {
        option (google.api.http) = {
            get: "/wirelessmesh/get-customer-location"
        };
    }

    rpc ToggleNightlight(ToggleNightlightCommand) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/wirelessmesh/toggle-nightlight"
            body: "*"
        };
    }
}
